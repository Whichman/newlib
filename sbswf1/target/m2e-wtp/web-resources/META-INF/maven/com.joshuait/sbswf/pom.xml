<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.joshuait</groupId>
	<artifactId>sbswf</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<properties>
		<jetty.version>9.2.10.v20150310</jetty.version>
		<spring.version>4.2.6.RELEASE</spring.version>
		<slf4j.version>1.7.12</slf4j.version>
		<mybatis.version>3.4.0</mybatis.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.22</version>
			<scope>runtime</scope>
		</dependency>
		<!-- Spring start -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Spring end -->

		<!-- MyBatis3 start -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.0</version>
		</dependency>
		<!-- MyBatis3 end/ -->

		<!-- slf4j/log4j2 start -->
		<!-- 代码直接调用log4j会被桥接到slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<version>1.7.7</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.6.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.6.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.6.1</version>
		</dependency>

		<!-- slf4j/log4j2 end/ -->

		<!-- Servlet & JSTL start -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<!-- Jsp & Servlet end -->

		<!-- 经常使用的一些工具类 start -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>17.0</version>
		</dependency>
		<!-- 经常使用的一些工具类 end / -->

		<!-- jetty start 开发阶段通过main方法运行jetty -->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlet</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>apache-jsp</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>apache-jstl</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- jetty end / -->
		<!-- 上传组件包 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.9</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>sbswf</finalName>

		<!-- 解决 编译的时候mybatis的**Mapper.xml文件总是不编译问题（classes文件夹内没有出现） -->
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
				<!-- 是否替换资源中的属性 -->
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>

		<plugins>
			<!-- 设置maven项目的编译级别：jdk1.8 servlet3.1 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<!-- jetty插件 目的是可以使用mvn jetty:run运行项目 -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty.version}</version>
				<!-- http://localhost:8080/sbswf -->
				<configuration>
					<!-- 配置contextPath -->
					<webApp>
						<contextPath>/sbswf</contextPath>
					</webApp>
					<!-- jetty监听的端口号 -->
					<httpConnector>
						<port>8081</port>
					</httpConnector>
					<!-- 在命令行中按回车建 重新加载文件 -->
					<reload>manual</reload>
				</configuration>
			</plugin>

			<!-- 使用cargo 部署项目到tomcat8(cargo文档地址：https://codehaus-cargo.github.io/cargo/Maven2+Plugin+Reference+Guide.html) -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.5.0</version>
				<!-- 1. standalone方式，maven命令： mvn package cargo:run -->
				<!-- <configuration> <container> <containerId>tomcat8x</containerId> 
					<home>D:\devsoft\apache-tomcat-8.0.36</home> </container> <configuration> 
					<home>${project.build.directory}/tomcat8x</home> <type>standalone</type> 
					<properties><cargo.servlet.port>8081</cargo.servlet.port></properties> </configuration> 
					</configuration> -->

				<!-- 2. existing方式 ，maven命令： mvn cargo:run -->
				<!-- <configuration> <container> <containerId>tomcat8x</containerId> 
					<home>D:\devsoft\apache-tomcat-8.0.36</home> </container> <configuration> 
					<type>existing</type> <home>D:\devsoft\apache-tomcat-8.0.36</home> </configuration> 
					</configuration> -->

				<!-- 3. 部署至远程Web容器，maven命令： mvn cargo:redeploy -->
				<configuration>
					<container>
						<containerId>tomcat8x</containerId>
						<type>remote</type>
					</container>
					<configuration>
						<type>runtime</type>
						<properties>
							<cargo.remote.username>tomcat</cargo.remote.username>
							<cargo.remote.password>123456</cargo.remote.password>
						</properties>
					</configuration>
					<deployables>
						<deployable>
							<type>war</type>
							<location>${project.build.directory}/${project.build.finalName}.${project.packaging}</location>
							<pingURL>http://localhost:8080/${project.build.finalName}</pingURL>
						</deployable>
					</deployables>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
